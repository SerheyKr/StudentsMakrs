@page "/marks/addStudent"
@using StudentsMakrs.Client.Interfaces
@using StudentsMakrs.Client.Models
@using StudentsMakrs.Client.Services
@using StudentsMakrs
@inject IJSRuntime JS
@inject IStudentService StudentService
@inject IFacultyService FacultyService
@inject PersistentComponentState PersistentComponentState
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@implements IDisposable
@attribute [StreamRendering]
@rendermode InteractiveAuto

<PageTitle>Add Student</PageTitle>
<h1>Add Student</h1>

<input @bind="@firstName" placeholder="First name" />
<input @bind="@surname" placeholder = "Surname"/>
<input @bind="@lastName" placeholder = "Last name"/>

<button class="btn btn-primary" @onclick="@LoadFaculties">@(currentFaculty != null ? currentFaculty.FacultyName: "Select faculty")</button>
<button class="btn btn-primary" @onclick="@LoadDepartments">@(currentDepartment != null ? currentDepartment.FullName : "Select department")</button>

<button class="btn btn-primary" @onclick="@AddStudent">Add</button>
<button class="btn btn-primary" @onclick="@BackToMarks">Cancel</button>

<paper-dialog elevation=3 align="center" id="faculty" class="paper-dialog-block vis-hiden" aria-hidden="true">
    <h2>Faculty</h2>
    <paper-dialog-scrollable class="vis-hiden paper-block">
        @foreach (var x in faculties ?? new List<Faculty>())
        {
            <div>
                <button class="btn btn-primary" @onclick="@(e => {currentFaculty = x; CloseAllDialogs();})">@x.FacultyName</button>
            </div>
        }
        <div><button class="btn btn-primary" @onclick="@OpenAddFacultyForm">Add new</button></div>
    </paper-dialog-scrollable>
</paper-dialog>

<paper-dialog elevation=3 align="center" id="department" class="paper-dialog-block vis-hiden" aria-hidden="true">
    <h2>Department</h2>
    <paper-dialog-scrollable class="vis-hiden paper-block">
        @foreach (var x in departments ?? new List<Department>())
        {
            <div>
                <button class="btn btn-primary" @onclick="@(e => {currentDepartment = x; CloseAllDialogs();})">@x.FullName</button>
            </div>
        }
        <div><button class="btn btn-primary" @onclick="@OpenAddDepartmentForm">Add new</button></div>
    </paper-dialog-scrollable>
</paper-dialog>

<paper-dialog elevation=3 align="center" id="addFacultyForm" class="paper-dialog-block vis-hiden" aria-hidden="true">
    <h2>Add faculty</h2>
    <div>
        <input placeholder="Faculty name" @bind="newFacultyName" />
    </div>
    <div>
        <button class="btn btn-primary" @onclick="@AddFacultie">Add</button>
        <button class="btn btn-primary" onclick="CloseAllDialogs();">Cancel</button>
    </div>
</paper-dialog>

<paper-dialog elevation=3 align="center" id="addDepartmentForm" class="paper-dialog-block vis-hiden" aria-hidden="true">
    <h2>Add department</h2>
    <div>
        <input placeholder="Department name" @bind="newDepartmentName" />
        <input placeholder="Branch name" @bind="newBranchName" />
    </div>
    <div>
        <button class="btn btn-primary" @onclick="@AddDepartment">Add</button>
        <button class="btn btn-primary" onclick="CloseAllDialogs();">Cancel</button>
    </div>
</paper-dialog>

<script>
    function OpenFaculty() {
        CloseAllDialogs();
        faculty.open();
    }
    function OpenDepartment() {
        CloseAllDialogs();
        department.open();
    }
    function AddFacultyForm() {
        CloseAllDialogs();
        addFacultyForm.open();
    }
    function AddDepartmentForm() {
        CloseAllDialogs();
        addDepartmentForm.open();
    }

    function CloseAllDialogs() {
        faculty.close();
        department.close();
        addFacultyForm.close();
        addDepartmentForm.close();
    }
</script>

@code {
    private List<Faculty>? faculties;
    private List<Department>? departments;
    private PersistingComponentStateSubscription persistingSubscription;

    private string? newDepartmentName;
    private string? newBranchName;
    private string? newFacultyName;

    private string? firstName;
    private string? surname;
    private string? lastName;

    private Faculty? currentFaculty;
    private Department? currentDepartment;

    protected async Task CloseAllDialogs()
    {
        await jsRuntime.InvokeVoidAsync("CloseAllDialogs");
    }

    protected async Task LoadFaculties()
    {
        persistingSubscription = PersistentComponentState.RegisterOnPersisting(PersistDataFaculties);

        if (!PersistentComponentState.TryTakeFromJson<List<Faculty>>(nameof(faculties), out faculties))
        {
            faculties = await FacultyService.GetFaculties();
        }

        await jsRuntime.InvokeVoidAsync("OpenFaculty");
    }

    protected async Task OpenAddFacultyForm()
    {
        await jsRuntime.InvokeVoidAsync("AddFacultyForm");
    }

    protected async Task OpenAddDepartmentForm()
    {
        await jsRuntime.InvokeVoidAsync("AddDepartmentForm");
    }

    protected void DeleteFacultie(long id)
    {

    }

    protected async void AddFacultie()
    {
        if (!string.IsNullOrEmpty(newFacultyName))
        {
            var toAdd = new Faculty()
                {
                    FacultyName = newFacultyName,
                };
            await FacultyService.PostFaculty(toAdd);
            await LoadFaculties();
        }
    }

    protected async Task LoadDepartments()
    {
        persistingSubscription = PersistentComponentState.RegisterOnPersisting(PersistDataDepartments);

        if (!PersistentComponentState.TryTakeFromJson<List<Department>>(nameof(departments), out departments))
        {
            departments = await FacultyService.GetDepartments();
        }

        await jsRuntime.InvokeVoidAsync("OpenDepartment");
    }

    protected void DeleteDepartment(long id)
    {

    }

    protected async Task AddDepartment()
    {
        if (!string.IsNullOrEmpty(newDepartmentName) && !string.IsNullOrEmpty(newBranchName))
        {
            var toAdd = new Department()
            {
                BranchName = newBranchName,
                DepartmentName = newDepartmentName,
            };
            await FacultyService.PostDepartment(toAdd);

            await LoadDepartments();
        }
    }

    protected void BackToMarks()
    {
        RedirectTo("marks");
    }

    protected async Task AddStudent()
    {
        if (!string.IsNullOrEmpty(firstName) && !string.IsNullOrEmpty(surname) && !string.IsNullOrEmpty(lastName) && currentDepartment != null && currentFaculty != null)
        {
            await StudentService.PostStudent(new Student()
            {
                FirstName = firstName,
                Surname = surname,
                LastName = lastName,
                FacultyId = currentFaculty.Id,
                DepartmentId = currentDepartment.Id,
            });
            BackToMarks();
        }
    }

    public void RedirectTo(string? uri)
    {
        uri ??= "";

        // Prevent open redirects.
        if (!Uri.IsWellFormedUriString(uri, UriKind.Relative))
        {
            uri = navigationManager.ToBaseRelativePath(uri);
        }

        // During static rendering, NavigateTo throws a NavigationException which is handled by the framework as a redirect.
        // So as long as this is called from a statically rendered Identity component, the InvalidOperationException is never thrown.
        navigationManager.NavigateTo(uri);
    }

    private Task PersistDataDepartments()
    {
        PersistentComponentState.PersistAsJson(nameof(departments), departments);

        return Task.CompletedTask;
    }

    private Task PersistDataFaculties()
    {
        PersistentComponentState.PersistAsJson(nameof(faculties), faculties);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose() => persistingSubscription.Dispose();
}
