@page "/marks"
@using StudentsMakrs.Client.Models
@using StudentsMakrs.Client.Services
@implements IDisposable
@inject IStudentService StudentService
@inject PersistentComponentState PersistentComponentState
@attribute [StreamRendering]

<PageTitle>Marks</PageTitle>

<h1>Marks</h1>

<p>This component demonstrates showing data.</p>

@if (students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Full name</th>
                <th>Faculty</th>
                <th>Department</th>
                <th>Average mark</th>
                <th>Total marks count</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in students)
            {
                <tr>
                    <td>@student.FullName</td>
                    <td>@student.Faculty.Name</td>
                    <td>@student.Department.Name</td>
                    <td>@(student.Marks.Sum(x => x.CurrentMark) / Math.Max(1, student.Marks.Count))</td>
                    <td>@student.Marks.Count</td>
                    <td align="right"><button>Details</button></td>
                </tr>
            }
        </tbody>
    </table>
    <button>
        Add
    </button>
}

@code {
    private List<Student>? students;
    private PersistingComponentStateSubscription persistingSubscription;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(1);

        persistingSubscription = PersistentComponentState.RegisterOnPersisting(PersistData);

        if (!PersistentComponentState.TryTakeFromJson<List<Student>>(nameof(students), out students))
        {
            students = await StudentService.GetStudents();
        }
    }

    private Task PersistData()
    {
        PersistentComponentState.PersistAsJson(nameof(students), students);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose() => persistingSubscription.Dispose();
}