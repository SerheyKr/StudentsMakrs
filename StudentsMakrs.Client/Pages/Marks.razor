@page "/students"
@using StudentsMakrs.Client.Interfaces
@using StudentsMakrs
@using StudentsMakrs.Client.Models
@implements IDisposable
@inject IJSRuntime JS
@inject IStudentService StudentService
@inject PersistentComponentState PersistentComponentState
@inject NavigationManager navigationManager
@attribute [StreamRendering]
@rendermode InteractiveAuto

<PageTitle>Students</PageTitle>

<h1>Students</h1>

@* <p>This component demonstrates showing data.</p> *@

@if (students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Full name</th>
                <th>Faculty</th>
                <th>Department</th>
                <th>Average mark</th>
                <th>Total marks count</th>
                <th>Student ID</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in students)
            {
                <tr>
                    <td>
                        @student.FullName
                    </td>
                    <td>@student.Faculty.FacultyName</td>
                    <td>@($"{student.Department.DepartmentName}-{student.Department.BranchName}") </td>
                    <td>@(student.Marks.Sum(x => x.CurrentMark) / Math.Max(1, student.Marks.Count))</td>
                    <td>@student.Marks.Count</td>
                    <td>@student.StudentID</td>
                    <td align="right"><button class="btn btn-primary" @onclick="() => ToDetails(student.StudentID)">Details</button></td>
                    <td align="right"><button class="btn btn-primary" @onclick="() => DeleteStudent(student.StudentID)" >-</button></td>
                </tr>
            }
        </tbody>
    </table>
    @* onclick = "userdetails.open();" *@

    <button class="btn btn-primary" type="submit" @onclick="@AddNewStudent">
        Add new student
    </button>
}

@* <paper-dialog elevation=3 align="center" id="userdetails" class="paper-dialog-block vis-hiden" aria-hidden="true">
    <h2>Header</h2>
    <paper-dialog-scrollable>
        Lorem ipsum...
    </paper-dialog-scrollable>
    <div class="buttons">
        <paper-button dialog-dismiss>Cancel</paper-button>
        <paper-button dialog-confirm autofocus>Accept</paper-button>
    </div>
</paper-dialog> *@

@code {
    private List<Student>? students;
    private PersistingComponentStateSubscription persistingSubscription;

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    protected async Task UpdateData()
    {
        students = null;
        persistingSubscription = PersistentComponentState.RegisterOnPersisting(PersistData);

        if (!PersistentComponentState.TryTakeFromJson<List<Student>>(nameof(students), out students))
        {
            students = await StudentService.GetStudents();
        }
    }

    protected void AddNewStudent(MouseEventArgs mouseEventArgs)
    {
        RedirectTo("students/addStudent");
    }

    protected async Task ToDetails(string id)
    {
        var path = navigationManager.GetUriWithQueryParameters("studentDetails", new Dictionary<string, object?> { ["id"] = id });
        navigationManager.NavigateTo(path);
    }

    protected async Task DeleteStudent(string id)
    { 
        await StudentService.DeleteStudent(id);
        await UpdateData();
    }

    public void RedirectTo(string? uri)
    {
        uri ??= "";

        // Prevent open redirects.
        if (!Uri.IsWellFormedUriString(uri, UriKind.Relative))
        {
            uri = navigationManager.ToBaseRelativePath(uri);
        }

        // During static rendering, NavigateTo throws a NavigationException which is handled by the framework as a redirect.
        // So as long as this is called from a statically rendered Identity component, the InvalidOperationException is never thrown.
        navigationManager.NavigateTo(uri);
    }

    private Task PersistData()
    {
        PersistentComponentState.PersistAsJson(nameof(students), students);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose() => persistingSubscription.Dispose();
}